using GeneratorDuty.Cache;
using GeneratorDuty.Common;
using GeneratorDuty.Database;
using GeneratorDuty.Models;
using Microsoft.EntityFrameworkCore;
using Telegram.Bot;
using Telegram.Bot.Types;
using Telegram.Bot.Types.ReplyMarkups;

namespace GeneratorDuty.Commands;

public class GetCommand(DutyContext ef) : BaseCommand
{
    public static MemoryExceptionDuty Cache { get; set; } = new ();
    
    private readonly Random _rnd = new Random();
    public override string Command { get; } = "/get";
    
    public override async Task ExecuteAsync(ITelegramBotClient client, Message message)
    {
        if (string.IsNullOrEmpty(message.Text) || message.From is null) return;
        
        var mainList = await ef.MemberDuties
            .Where(x => x.IdPeer == message.Chat.Id)
            .ToListAsync();

        if (mainList.Count is 0)
        {
            await client.SendTextMessageAsync(message.Chat.Id, $"‚ÑπÔ∏è –í —ç—Ç–æ –±–µ—Å–µ–¥–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã —Å–ø–∏—Å–∫–∏ –¥–µ–∂—É—Ä–Ω—ã—Ö, —é–∑–∞–π /update –∏ —É–∫–∞–∂–∏ —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø—ã —Ä–∞–∑–¥–µ–ª—è—è –ø–µ—Ä–µ–Ω–æ—Å–æ–º —Å—Ç—Ä–æ–∫–∏ –§–ò–û");
            return;
        }
        
        /* –ò—Å–∫–ª—é—á–∞–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ —Ç–µ—Ö, –∫–æ–≥–æ —Å–µ–π—á–∞—Å –Ω–µ—Ç */

        foreach (var found in Cache.GetFromChats(message.Chat.Id)
                     .Select(item => mainList
                         .FirstOrDefault(x => x.Id == item.Id)).OfType<MemberDuty>())
        {
            mainList.Remove(found);
        }
        
        /* ------ */
        
        /* –ù–µ –ø—Ä–∏—à–µ–¥—à–∏–µ –≤ –ø—Ä–æ—à–ª—ã–π —Ä–∞–∑ */
        
        var lostedMembers = await GetLostsFromChat(message.Chat.Id);

        foreach (var member in lostedMembers)
        {
            var foundInHistory = await FoundInHistory(member.Duty!);
            if(foundInHistory is not null) continue;
            
            await client.SendTextMessageAsync(message.Chat.Id, $"‚úÖ –Ø –ø–æ–º–Ω—é, –∫–∞–∫ –∫–æ–µ-—Ç–æ —É–±–µ–∂–∞–ª –æ—Ç –º–µ–Ω—è. –í—Ä–µ–º—è –Ω–∞—Å—Ç–∞–ª–æ. –î–µ–∂—É—Ä–∏—Ç: {member.Duty?.MemberNameDuty}", replyMarkup: new InlineKeyboardMarkup(GenerateKeyboardForNotify(member.Id)));
            return;
        }
        
        /* ------ */
        
        /* –ù–µ –ø—Ä–∏—à–µ–¥—à–∏–µ –≤ –ø—Ä–æ—à–ª—ã–π —Ä–∞–∑ */
        
        var listNonDutiesLast = mainList.ToList();
        
        foreach (var member in mainList)
        {
            var item = await FoundInHistory(member);
            if(item is null) continue;
            listNonDutiesLast.Remove(member);
        }
        
        if (listNonDutiesLast.Count is 0 && mainList.Count is not 0)
        {
            var memberDutyForce = mainList[_rnd.Next(0, mainList.Count)];
            await client.SendTextMessageAsync(message.Chat.Id, $"‚ÑπÔ∏è –ß—Ç–æ? –Ø–∫–æ–±—ã –≤—Å–µ –æ—Ç–¥–µ–∂—É—Ä–∏–ª–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π?)) –•–∞-—Ö–∞, –Ω–∏–∫–∞–∫ –Ω–µ –ø–æ–º–µ—à–∞–µ—Ç –º–Ω–µ –≤—ã–±—Ä–∞—Ç—å: {memberDutyForce.MemberNameDuty}", replyMarkup: new InlineKeyboardMarkup(GenerateKeyboardForNotify(memberDutyForce.Id)));
            return;
        }
        
        var memberDuty = listNonDutiesLast[_rnd.Next(0, listNonDutiesLast.Count)];
        
        await client.SendTextMessageAsync(message.Chat.Id, $"‚úÖ –°–µ–≥–æ–¥–Ω—è –¥–µ–∂—É—Ä–∏—Ç: {memberDuty.MemberNameDuty}", replyMarkup: new InlineKeyboardMarkup(GenerateKeyboardForNotify(memberDuty.Id)));
    }

    // –í—ã–≥—Ä—É–∑–∫–∞ —Ç–µ—Ö, –∫—Ç–æ –ø–æ–ø–∞–ª –Ω–∞ –¥–µ–∂—É—Ä—Å—Ç–≤–æ, –Ω–æ –æ—Ç–¥–µ–∂—É—Ä–∏–ª
    private async Task<List<LogDutyMemberLost>> GetLostsFromChat(long chatId)
    { 
        var list = await ef.LogDutyMemberLosts
            .Include(x => x.Duty)
            .Where(x => x.Duty!.IdPeer == chatId
                        && x.Date >= DateTime.Now.AddDays(-14))
            .ToListAsync();

        foreach (var found in Cache.GetFromChats(chatId)
                     .Select(item => list.FirstOrDefault(x => x.Id == item.Id))
                     .OfType<LogDutyMemberLost>())
        {
            list.Remove(found);
        }

        return list;
    }
    
    // –ü–æ–∏—Å–∫ –≤ –∏—Å—Ç–æ—Ä–∏–∏ –¥–µ–∂—É—Ä—Å—Ç–≤–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
    private async Task<LogDutyMember?> FoundInHistory(MemberDuty duty)
    {
        return await ef.LogDutyMembers
            .FirstOrDefaultAsync(x => x.UserId == duty.Id
                                      && x.Date >= DateTime.Now.AddDays(-14));
    }
    
    private IList<IList<InlineKeyboardButton>> GenerateKeyboardForNotify(long dutyId)
    {
        return new List<IList<InlineKeyboardButton>>
        {
            new List<InlineKeyboardButton>
            {
                InlineKeyboardButton.WithCallbackData("üñå –û—Ç–¥–µ–∂—É—Ä–∏–ª",
                    $"duty_accept {dutyId}"),
                InlineKeyboardButton.WithCallbackData("‚ùå –ï–≥–æ –Ω–µ—Ç",
                    $"duty_reject {dutyId}")
            },
        };
    }
}