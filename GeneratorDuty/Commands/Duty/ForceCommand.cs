using GeneratorDuty.Common;
using GeneratorDuty.Extensions;
using GeneratorDuty.Models;
using GeneratorDuty.Repository;
using Telegram.Bot;
using Telegram.Bot.Types;
using Telegram.Bot.Types.ReplyMarkups;

namespace GeneratorDuty.Commands.Duty;

public class ForceCommand(DutyRepository repository) : BaseCommand
{
    public override string Command { get; } = "/force";

    private readonly string _usage =
        $"‚ÑπÔ∏è –í —ç—Ç–æ –±–µ—Å–µ–¥–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã —Å–ø–∏—Å–∫–∏ –¥–µ–∂—É—Ä–Ω—ã—Ö, —é–∑–∞–π /update –∏ —É–∫–∞–∂–∏ —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø—ã —Ä–∞–∑–¥–µ–ª—è—è –ø–µ—Ä–µ–Ω–æ—Å–æ–º —Å—Ç—Ä–æ–∫–∏ –§–ò–û";

    public override async Task ExecuteAsync(ITelegramBotClient client, Message message)
    {
        if (string.IsNullOrEmpty(message.Text) || message.From is null) return;
        
        var prop = await repository.ScheduleProps.GetSchedulePropFromChat(message.Chat.Id);

        if (prop is null)
        {
            await client.TrySendMessage(message.Chat.Id, _usage);
            return;
        }
        
        if (prop.IsRequiredAdminRights && !await client.IsUserAdminInChat(message.From.Id, message.Chat.Id))
        {
            await client.TrySendMessage(message.Chat.Id, "–í —ç—Ç–æ–º —á–∞—Ç–µ –¥–∞–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –º–æ–≥—É—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –±–µ—Å–µ–¥—ã");
            return;
        }
        
        var mainList = (await repository.Members.GetMembersFromChat(message.Chat.Id)).ToList();

        if (mainList.Count is 0)
        {
            await client.TrySendMessage(message.Chat.Id, _usage);
            return;
        }

        string msg = "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–∂—É—Ä–Ω–æ–≥–æ –≤—Ä—É—á–Ω—É—é: ";

        await client.TrySendMessage(message.Chat.Id, msg,
            replyMarkup: new InlineKeyboardMarkup(GenerareKeyboard(mainList)));
    }

    private IList<IList<InlineKeyboardButton>> GenerareKeyboard(List<MemberDuty> members)
    {
        var keyboard = new List<IList<InlineKeyboardButton>>();
        var row = new List<InlineKeyboardButton>(); 
        int buttonCount = 0;

        foreach (var member in members)
        {
            if (buttonCount == 3)
            {
                keyboard.Add(row); 
                row = new List<InlineKeyboardButton>();
                buttonCount = 0;
            }

            row.Add(InlineKeyboardButton.WithCallbackData($"{member.MemberNameDuty}", $"duty_force {member.Id}"));
            buttonCount++;
        }

        if (row.Count != 0) 
        {
            keyboard.Add(row);
        }
        
        row.Add(InlineKeyboardButton.WithCallbackData($"üî∏–û—Ç–º–µ–Ω–∞", $"duty_force_cancel"));
        return keyboard;
    }
}